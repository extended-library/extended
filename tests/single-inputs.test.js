import duration from '../src'

describe('called with single input values', () => {
  test('with {number} types - positive integers', () => {
    expect(duration(1)).toBe(1)
    expect(duration(10)).toBe(10)
    expect(duration(100)).toBe(100)
    expect(duration(1000)).toBe(1000)
  })

  test('with {number} types - negative integers', () => {
    expect(duration(-1)).toBe(-1)
    expect(duration(-10)).toBe(-10)
    expect(duration(-100)).toBe(-100)
    expect(duration(-1000)).toBe(-1000)
  })

  test('with {number} types - positive floats', () => {
    expect(duration(0.1)).toBe(0)
    expect(duration(0.4)).toBe(0)
    expect(duration(0.5)).toBe(1)
    expect(duration(0.9)).toBe(1)
    expect(duration(1.0)).toBe(1)
    expect(duration(1.4)).toBe(1)
    expect(duration(1.5)).toBe(2)
    expect(duration(1.6)).toBe(2)
    expect(duration(1.9)).toBe(2)
  })

  test('with {number} types - negative floats', () => {
    expect(duration(-0.1)).toBe(0)
    expect(duration(-0.4)).toBe(0)
    expect(duration(-0.5)).toBe(0)
    expect(duration(-0.9)).toBe(-1)
    expect(duration(-1.0)).toBe(-1)
    expect(duration(-1.4)).toBe(-1)
    expect(duration(-1.5)).toBe(-1)
    expect(duration(-1.6)).toBe(-2)
    expect(duration(-1.9)).toBe(-2)
  })

  test('with {string} types - whole units - without a time unit', () => {
    expect(duration('1')).toBe(1)
    expect(duration('10')).toBe(10)
    expect(duration('100')).toBe(100)
    expect(duration('1000')).toBe(1000)
    expect(duration('0')).toBe(0)
    expect(duration('-1000')).toBe(-1000)
    expect(duration('-100')).toBe(-100)
    expect(duration('-10')).toBe(-10)
    expect(duration('-1')).toBe(-1)
  })

  test('with {string} types - whole units - with various time units', () => {
    expect(duration('1ms')).toBe(1)
    expect(duration('10s')).toBe(10000)
    expect(duration('100m')).toBe(6000000)
    expect(duration('1000h')).toBe(3600000000)
    expect(duration('0d')).toBe(0)
    expect(duration('-1000w')).toBe(-604800000000)
  })

  test('with {string} types - decimal units - without a time unit', () => {
    expect(duration('1.1')).toBe(1)
    expect(duration('10.20')).toBe(10)
    expect(duration('100.300')).toBe(100)
    expect(duration('1000.4000')).toBe(1000)
    expect(duration('0.0')).toBe(0)
    expect(duration('-1000.9000')).toBe(-1001)
    expect(duration('-100.800')).toBe(-101)
    expect(duration('-10.70')).toBe(-11)
    expect(duration('-1.6')).toBe(-2)
  })

  test('with {string} types - decimal units - with various time units', () => {
    expect(duration('1.9ms')).toBe(2)
    expect(duration('10.88s')).toBe(10880)
    expect(duration('100.777m')).toBe(6046620)
    expect(duration('1000.6666h')).toBe(3602399760)
    expect(duration('0.0d')).toBe(0)
    expect(duration('-1000.5555w')).toBe(-605135966400)
  })

  test('with "milliseconds" time unit', () => {
    expect(duration('1000ms')).toBe(1000)
    expect(duration('1000msec')).toBe(1000)
    expect(duration('1000msecs')).toBe(1000)
    expect(duration('1000millisec')).toBe(1000)
    expect(duration('1000millisecond')).toBe(1000)
    expect(duration('1000milliseconds')).toBe(1000)
  })

  test('with "seconds" time unit', () => {
    expect(duration('1000s')).toBe(1000000)
    expect(duration('1000sec')).toBe(1000000)
    expect(duration('1000secs')).toBe(1000000)
    expect(duration('1000second')).toBe(1000000)
    expect(duration('1000seconds')).toBe(1000000)
  })

  test('with "minutes" time unit', () => {
    expect(duration('1000m')).toBe(60000000)
    expect(duration('1000mn')).toBe(60000000)
    expect(duration('1000min')).toBe(60000000)
    expect(duration('1000mins')).toBe(60000000)
    expect(duration('1000minute')).toBe(60000000)
    expect(duration('1000minutes')).toBe(60000000)
  })

  test('with "hours" time unit', () => {
    expect(duration('1000h')).toBe(3600000000)
    expect(duration('1000hr')).toBe(3600000000)
    expect(duration('1000hrs')).toBe(3600000000)
    expect(duration('1000hour')).toBe(3600000000)
    expect(duration('1000hours')).toBe(3600000000)
  })

  test('with "days" time unit', () => {
    expect(duration('1000d')).toBe(86400000000)
    expect(duration('1000dy')).toBe(86400000000)
    expect(duration('1000day')).toBe(86400000000)
    expect(duration('1000days')).toBe(86400000000)
  })

  test('with "weeks" time unit', () => {
    expect(duration('1000w')).toBe(604800000000)
    expect(duration('1000wk')).toBe(604800000000)
    expect(duration('1000wks')).toBe(604800000000)
    expect(duration('1000week')).toBe(604800000000)
    expect(duration('1000weeks')).toBe(604800000000)
  })

  test('units with whitespace (" ") spearators', () => {
    expect(duration('1 000 ms')).toBe(1000)
    expect(duration('1 000 000 ms')).toBe(1000000)
    expect(duration('1 000 000 000 ms')).toBe(1000000000)
    expect(duration('1 000.25 s')).toBe(1000250)
    expect(duration('1 000 000.50 s')).toBe(1000000500)
    expect(duration('1 000 000 000.75 s')).toBe(1000000000750)
    expect(duration('1 000.25 ms')).toBe(1000)
    expect(duration('1 000 000.50 ms')).toBe(1000001)
    expect(duration('1 000 000 000.75 ms')).toBe(1000000001)
    expect(duration('1 000.25 min')).toBe(60015000)
    expect(duration('1 000 000.50 min')).toBe(60000030000)
    expect(duration('1 000 000 000.75 min')).toBe(60000000045000)
  })

  test('units with underscore ("_") spearators', () => {
    expect(duration('1_000 ms')).toBe(1000)
    expect(duration('1_000_000 ms')).toBe(1000000)
    expect(duration('1_000_000_000 ms')).toBe(1000000000)
    expect(duration('1_000.25 s')).toBe(1000250)
    expect(duration('1_000_000.50 s')).toBe(1000000500)
    expect(duration('1_000_000_000.75 s')).toBe(1000000000750)
    expect(duration('1_000.25 ms')).toBe(1000)
    expect(duration('1_000_000.50 ms')).toBe(1000001)
    expect(duration('1_000_000_000.75 ms')).toBe(1000000001)
    expect(duration('1_000.25 min')).toBe(60015000)
    expect(duration('1_000_000.50 min')).toBe(60000030000)
    expect(duration('1_000_000_000.75 min')).toBe(60000000045000)
  })

  test('units with dash ("-") spearators', () => {
    expect(duration('1-000 ms')).toBe(1000)
    expect(duration('1-000-000 ms')).toBe(1000000)
    expect(duration('1-000-000-000 ms')).toBe(1000000000)
    expect(duration('1-000.25 s')).toBe(1000250)
    expect(duration('1-000-000.50 s')).toBe(1000000500)
    expect(duration('1-000-000-000.75 s')).toBe(1000000000750)
    expect(duration('1-000.25 ms')).toBe(1000)
    expect(duration('1-000-000.50 ms')).toBe(1000001)
    expect(duration('1-000-000-000.75 ms')).toBe(1000000001)
    expect(duration('1-000.25 min')).toBe(60015000)
    expect(duration('1-000-000.50 min')).toBe(60000030000)
    expect(duration('1-000-000-000.75 min')).toBe(60000000045000)
  })

  test('units with comma (",") spearators', () => {
    expect(duration('1,000 ms')).toBe(1000)
    expect(duration('1,000,000 ms')).toBe(1000000)
    expect(duration('1,000,000,000 ms')).toBe(1000000000)
    expect(duration('1,000.25 s')).toBe(1000250)
    expect(duration('1,000,000.50 s')).toBe(1000000500)
    expect(duration('1,000,000,000.75 s')).toBe(1000000000750)
    expect(duration('1,000.25 ms')).toBe(1000)
    expect(duration('1,000,000.50 ms')).toBe(1000001)
    expect(duration('1,000,000,000.75 ms')).toBe(1000000001)
    expect(duration('1,000.25 min')).toBe(60015000)
    expect(duration('1,000,000.50 min')).toBe(60000030000)
    expect(duration('1,000,000,000.75 min')).toBe(60000000045000)
  })

  test('with common, practical time units', () => {
    expect(duration('3.5d')).toBe(302400000)
    expect(duration('3.5day')).toBe(302400000)
    expect(duration('3.5days')).toBe(302400000)
    expect(duration('1.5h')).toBe(5400000)
    expect(duration('1.5hour')).toBe(5400000)
    expect(duration('1.5hours')).toBe(5400000)
    expect(duration('175m')).toBe(10500000)
    expect(duration('175min')).toBe(10500000)
    expect(duration('175minutes')).toBe(10500000)
    expect(duration('42s')).toBe(42000)
    expect(duration('42sec')).toBe(42000)
    expect(duration('42seconds')).toBe(42000)
    expect(duration('300ms')).toBe(300)
    expect(duration('300millisecond')).toBe(300)
    expect(duration('300milliseconds')).toBe(300)
  })
})
